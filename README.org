* neon-os-core-repo
:PROPERTIES:
:CUSTOM_ID: neon-os-core-repo
:END:
neon-os arch repo

** Getting started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:
To make it easy for you to get started with GitLab, here's a list of
recommended next steps.

Already a pro? Just edit this README.md and make it your own. Want to
make it easy? [[#editing-this-readme][Use the template at the bottom]]!

** Add your files
:PROPERTIES:
:CUSTOM_ID: add-your-files
:END:
- [ ]
  [[https://docs.gitlab.com/ee/user/project/repository/web_editor.html#create-a-file][Create]]
  or
  [[https://docs.gitlab.com/ee/user/project/repository/web_editor.html#upload-a-file][upload]]
  files
- [ ]
  [[https://docs.gitlab.com/ee/gitlab-basics/add-file.html#add-a-file-using-the-command-line][Add
  files using the command line]] or push an existing Git repository with
  the following command:

#+begin_example
cd existing_repo
git remote add origin https://gitlab.com/NEON-MMD/neon-os-core-repo.git
git branch -M main
git push -uf origin main
#+end_example

** Integrate with your tools
:PROPERTIES:
:CUSTOM_ID: integrate-with-your-tools
:END:
- [ ]
  [[https://gitlab.com/NEON-MMD/neon-os-core-repo/-/settings/integrations][Set
  up project integrations]]

** Collaborate with your team
:PROPERTIES:
:CUSTOM_ID: collaborate-with-your-team
:END:
- [ ] [[https://docs.gitlab.com/ee/user/project/members/][Invite team
  members and collaborators]]
- [ ]
  [[https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html][Create
  a new merge request]]
- [ ]
  [[https://docs.gitlab.com/ee/user/project/issues/managing_issues.html#closing-issues-automatically][Automatically
  close issues from merge requests]]
- [ ]
  [[https://docs.gitlab.com/ee/user/project/merge_requests/approvals/][Enable
  merge request approvals]]
- [ ]
  [[https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html][Automatically
  merge when pipeline succeeds]]

** Test and Deploy
:PROPERTIES:
:CUSTOM_ID: test-and-deploy
:END:
Use the built-in continuous integration in GitLab.

- [ ] [[https://docs.gitlab.com/ee/ci/quick_start/index.html][Get
  started with GitLab CI/CD]]
- [ ]
  [[https://docs.gitlab.com/ee/user/application_security/sast/][Analyze
  your code for known vulnerabilities with Static Application Security
  Testing(SAST)]]
- [ ]
  [[https://docs.gitlab.com/ee/topics/autodevops/requirements.html][Deploy
  to Kubernetes, Amazon EC2, or Amazon ECS using Auto Deploy]]
- [ ] [[https://docs.gitlab.com/ee/user/clusters/agent/][Use pull-based
  deployments for improved Kubernetes management]]
- [ ]
  [[https://docs.gitlab.com/ee/ci/environments/protected_environments.html][Set
  up protected environments]]

--------------

* Editing this README
:PROPERTIES:
:CUSTOM_ID: editing-this-readme
:END:
When you're ready to make this README your own, just edit this file and
use the handy template below (or feel free to structure it however you
want - this is just a starting point!). Thank you to
[[https://www.makeareadme.com/][makeareadme.com]] for this template.

** Suggestions for a good README
:PROPERTIES:
:CUSTOM_ID: suggestions-for-a-good-readme
:END:
Every project is different, so consider which of these sections apply to
yours. The sections used in the template are suggestions for most open
source projects. Also keep in mind that while a README can be too long
and detailed, too long is better than too short. If you think your
README is too long, consider utilizing another form of documentation
rather than cutting out information.

** Name
:PROPERTIES:
:CUSTOM_ID: name
:END:
Choose a self-explaining name for your project.

** Description
:PROPERTIES:
:CUSTOM_ID: description
:END:
Let people know what your project can do specifically. Provide context
and add a link to any reference visitors might be unfamiliar with. A
list of Features or a Background subsection can also be added here. If
there are alternatives to your project, this is a good place to list
differentiating factors.

** Badges
:PROPERTIES:
:CUSTOM_ID: badges
:END:
On some READMEs, you may see small images that convey metadata, such as
whether or not all the tests are passing for the project. You can use
Shields to add some to your README. Many services also have instructions
for adding a badge.

** Visuals
:PROPERTIES:
:CUSTOM_ID: visuals
:END:
Depending on what you are making, it can be a good idea to include
screenshots or even a video (you'll frequently see GIFs rather than
actual videos). Tools like ttygif can help, but check out Asciinema for
a more sophisticated method.

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
Within a particular ecosystem, there may be a common way of installing
things, such as using Yarn, NuGet, or Homebrew. However, consider the
possibility that whoever is reading your README is a novice and would
like more guidance. Listing specific steps helps remove ambiguity and
gets people to using your project as quickly as possible. If it only
runs in a specific context like a particular programming language
version or operating system or has dependencies that have to be
installed manually, also add a Requirements subsection.

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
Use examples liberally, and show the expected output if you can. It's
helpful to have inline the smallest example of usage that you can
demonstrate, while providing links to more sophisticated examples if
they are too long to reasonably include in the README.

** Support
:PROPERTIES:
:CUSTOM_ID: support
:END:
Tell people where they can go to for help. It can be any combination of
an issue tracker, a chat room, an email address, etc.

** Roadmap
:PROPERTIES:
:CUSTOM_ID: roadmap
:END:
If you have ideas for releases in the future, it is a good idea to list
them in the README.

** Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:
State if you are open to contributions and what your requirements are
for accepting them.

For people who want to make changes to your project, it's helpful to
have some documentation on how to get started. Perhaps there is a script
that they should run or some environment variables that they need to
set. Make these steps explicit. These instructions could also be useful
to your future self.

You can also document commands to lint the code or run tests. These
steps help to ensure high code quality and reduce the likelihood that
the changes inadvertently break something. Having instructions for
running tests is especially helpful if it requires external setup, such
as starting a Selenium server for testing in a browser.

** Authors and acknowledgment
:PROPERTIES:
:CUSTOM_ID: authors-and-acknowledgment
:END:
Show your appreciation to those who have contributed to the project.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
For open source projects, say how it is licensed.

** Project status
:PROPERTIES:
:CUSTOM_ID: project-status
:END:
If you have run out of energy or time for your project, put a note at
the top of the README saying that development has slowed down or stopped
completely. Someone may choose to fork your project or volunteer to step
in as a maintainer or owner, allowing your project to keep going. You
can also make an explicit request for maintainers.
